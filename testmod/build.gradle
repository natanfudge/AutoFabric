

plugins {
    id 'fabric-loom' version '0.4-SNAPSHOT'
    id 'maven-publish'
    id "com.dorongold.task-tree" version "1.5"
    id "fudge.autofabric" version "1.0.0-rc1"
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    mavenLocal()
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"


//    compileOnly project(':codegen')
//    annotationProcessor project(':codegen')

    // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
    // You may need to force-disable transitiveness on them.
}


//classes.doLast {
//    def entryPointsDir = Paths.get(compileJava.options.annotationProcessorGeneratedSourcesDirectory.toString(), "autofabric", "entrypoints")
//
//    def fabricModJson = Paths.get(sourceSets.main.output.resourcesDir.toString(), "fabric.mod.json")
//    def json = new JsonSlurper().parseText(new String(Files.readAllBytes(fabricModJson)))
//    Files.list(entryPointsDir).forEach { p ->
//        def key = new String(Files.readAllBytes(p))
//        def value = new ArrayList<String>()
//        value.add(p.fileName.toString())
//        json.entrypoints[key] = value
//        println("key = $key, value = $value")
//    }
//    def stringJson = new JsonBuilder(json).toPrettyString()
//    println("new json = " + stringJson)
//    Files.write(fabricModJson, stringJson.getBytes())
//
//}
//
//
//processResources {
//    inputs.property "version", project.version
//
//
////    def entryPoints = ""
//
//
////    inputs.property "entrypoints", entryPoints
//
//
//    from(sourceSets.main.resources.srcDirs) {
//        include "fabric.mod.json"
//        expand "version": project.version
////        expand "entrypoints" :entryPoints
//    }
//
//    from(sourceSets.main.resources.srcDirs) {
//        exclude "fabric.mod.json"
//    }
//}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}
